---

# Contains a list of units. Every unit contains logic (similar to a LUT in a
# CPLD).
# Units contain AND gates and OR gates. The order of AND and OR gates is
# controled by 'and_then_or' flag. Every input can be inverted.
# If the inputs need to be stable and logical '1' for a specific amount of time
# specify 'input_stable_usec'. If the input is not stable or logical '0' the
# result is '0'.
# If the first gate is AND and 'invert_first_gate' is set, it acts like a NAND
# gate.
# If the first gate is OR and 'invert_first_gate' is set, it acts like a NOR
# gate.
# Specify 'delay_usec' to delay the output signal by usec.

inputs:
  - name: "FM_SLPS3_N"
    type: "gpio"
    signal_name: "FM_SLPS3"
    active_low: true
    description: "Indicates that the PCH is in ACPI S3."
    gate_input: true
    gated_idle_low: true
  - name: "FM_SLPS4_N"
    type: "gpio"
    signal_name: "FM_SLPS4"
    active_low: true
    gate_input: true
    gated_idle_low: true
    description: "Indicates that the PCH is in ACPI S4 or S5."
  - name: "RST_RTCRST_N"
    signal_name: "RTCRST"
    type: "gpio"
    active_low: true
    description: >
      RTC well reset. With RTC battery installed should never be asserted.
      Without RTC battery asserted when in G3.
  - name: "RST_PLTRST_N"
    signal_name: "PLTRST"
    active_low: true
    gate_input: true
    gated_idle_low: true
    type: "gpio"
    description: >
      Global platform reset signal.
      Not all PCIe devices might be affected by this signal.
  - name: "PWRGD_CPUPWRGD"
    type: "gpio"
    gate_input: true
    gated_idle_low: true
    signal_name: "PWRGD_CPUPWRGD"
    description: "PROC_PWRGD. PCH informs the CPU that power is stable and clocks are running."

outputs:
  - name: "PWRGD_PCH_DPWROK"
    type: "gpio"
    signal_name: "DSW_PWROK"
    description: >
      PCH core power good for at least 10msec. Min 1 usec after RTCRST_N
  - name: "PWRGD_PCH_PWROK"
    type: "gpio"
    signal_name: "PCH_PWROK"
    description: "PCH core power good for at least 10msec."
    comment: "!FM_SLPS3_N && PCH_PWR_EN && !FAULT"
  - name: "RST_PCH_RSMRST_R_N"
    type: "gpio"
    signal_name: "RSMRST"
    active_low: true
    open_drain: true
    description: >
      All PCH primary power rails are stable for 10 msec.
      Either assert after SLP_SUS_N or 100msec after DSW_PWROK assertion.
    description: "PCH primary wells are stable, PCIe is out of reset and clocks are stable."
  - name: "PWRGD_SYS_PWROK"
    type: "gpio"
    signal_name: "SYS_PWROK"
    open_drain: true
    description: "PCH primary wells are stable, PCIe is out of reset and clocks are stable."
  - name: "H_LVT1_THERMTRIP_N"
    signal_name: "THRMTRIP"
    type: "gpio"
    active_low: true
    open_drain: true
    description: >
      Signal from BMC to PCH indicating an overheat condition. PCH will got to S5
      without following normal transition flow.
    comment: >
      PCH will immediately drive CPUPWRGD low and assert PLTRST_N, SLP_S3_N,
      SLP_S4_N, SLP_S5_N.
  
power_sequencer:
  - DSW_PWRGD_Unit:
      in:
        and:
          - name: "RTCRST"
            invert: true
            input_stable_usec: 1
          - name: "p3v3_pch_PowerGood"
            input_stable_usec: 10000 # EBG:BT2
          - name: "p3v3_pch_PowerGood"
      out:
        name: "DSW_PWROK"

  # P3V3 provides AUX power to PCH as well. Always drive it when not in G3
  - P3V3_Unit:
      in:
        and:
          - name: "RTCRST"
            invert: true
          - name: "STATE_REQ_CHASSIS_ON"
            input_stable_usec: 100  # EGB: min 1 usec
        or:
          - name: "p1v8_pch_aux_PowerGood"
            input_stable_usec: 100
        and_then_or: true
      out:
        name: "p3v3_pch_On"

  - p1v8_pch_aux_Unit:
      in:
        and:
          - name: "STATE_REQ_CHASSIS_ON"
            input_stable_usec: 100  # EGB:BT22 min 1 usec
          - name: "p3v3_pch_PowerGood"
            input_stable_usec: 100  # EGB: min 2 usec
          - name: "p3v3_pch_PowerGood"
        or:
          - name: "p1v05_pch_aux_PowerGood"
            input_stable_usec: 100
        and_then_or: true
      out:
        name: "p1v8_pch_aux_On"

  - p1v05_pch_aux_Unit:
      in:
        and:
          - name: "STATE_REQ_CHASSIS_ON"
            input_stable_usec: 100  # EGB:BT22 min 1 usec
          - name: "p1v8_pch_aux_PowerGood"
            input_stable_usec: 100  # EGB: min 2 usec
          - name: "p1v8_pch_aux_PowerGood"
        or:
          - name: "PCH_PWROK"
            input_stable_usec: 100  # min 100usec
        and_then_or: true
      out:
        name: "p1v05_pch_aux_On"

  - RSMRST_Unit:  # When not asserted then AUX power is on and system is in S5, else G3
      in:
        and:
          - name: "STATE_REQ_CHASSIS_ON"
          - name: "p3v3_pch_PowerGood"
            input_stable_usec: 10000  # LBG:BT3 min 10 msec
          - name: "p3v3_pch_PowerGood"
          - name: "p1v8_pch_aux_PowerGood"
            input_stable_usec: 10000  # LBG:BT3 min 10 msec
          - name: "p1v8_pch_aux_PowerGood"
          - name: "p1v05_pch_aux_PowerGood"
            input_stable_usec: 10000  # LBG:BT3 min 10 msec
          - name: "p1v05_pch_aux_PowerGood"
          # As SLP_SUS# can't be read using a GPIO wait maximum timeout
          - name: "DSW_PWROK"
            input_stable_usec: 100000  # LBG:T25 max 100 msec
          - name: "DSW_PWROK"
      out:
        active_low: true
        name: "RSMRST"

  # Wait 10msec after Vcc_main is stable.
  # Vcc_main is the same as AUX. AUX is already powered if RSMRST is asserted.
  # Vcc_main must be stable for 100usec or longer after PCH_PWROK goes low.
  # PCH_PWROK is only read by PCH if SLP_S3# is not asserted.
  - PCH_PWROK_Unit:
      in:
        and:
          - name: "RSMRST"
            input_stable_usec: 10000  # PCH Spec. 10msec
            invert: true
          - name: "RSMRST"
            invert: true
          - name: "FM_SLPS3"
            invert: true
          - name: "STATE_REQ_HOST_ON"
          - name: "STATE_REQ_CHASSIS_ON"
      out:
        name: "PCH_PWROK"

  # Enable DDR power when not in S5/S4
  - DDR_Power_Internal_Unit:
      in:
        and:
          - name: "RSMRST"
            invert: true
          - name: "FM_SLPS4"
            invert: true
          - name: "STATE_REQ_HOST_ON"
          - name: "CPU0_VR_Fault_Shutdown"
            input_stable_usec: 1000
            invert: true
          - name: "CPU1_VR_Fault_Shutdown"
            input_stable_usec: 1000
            invert: true
          - name: "CPU2_VR_Fault_Shutdown"
            input_stable_usec: 1000
            invert: true
          - name: "CPU3_VR_Fault_Shutdown"
            input_stable_usec: 1000
            invert: true
      out:
        name: "DDR_POWER"

  - CPU_POWER_Unit:
      in:
        and:
          - name: "FM_SLPS3"
            invert: true
          - name: "RSMRST"
            invert: true
          - name: "STATE_REQ_HOST_ON"
          - name: "CPU0_VR_Fault_Shutdown"
            input_stable_usec: 1000
            invert: true
          - name: "CPU1_VR_Fault_Shutdown"
            input_stable_usec: 1000
            invert: true
          - name: "CPU2_VR_Fault_Shutdown"
            input_stable_usec: 1000
            invert: true
          - name: "CPU3_VR_Fault_Shutdown"
            input_stable_usec: 1000
            invert: true
      out:
        name: "CPU_POWER"

  # SYS_PWROK is an indication that *ALL* VRs are running fault free.
  # SYS_PWROK must latch after PWRGD_CPUPWRGD goes high.
  # PWRGD_CPUPWRGD is not an input of SYS_PWROK!
  - SYS_PWROK_Unit:
      in:
        and:
          - name: "STATE_REQ_CHASSIS_ON"
          - name: "STATE_REQ_HOST_ON"
          - name: "RSMRST"
            invert: true
          - name: "DSW_PWROK"
          - name: "PCH_PWROK"
          - name: "FM_SLPS3"
            invert: true
          - name: "CPU0_SYS_PWROK"
          - name: "CPU1_SYS_PWROK"
          - name: "CPU2_SYS_PWROK"
          - name: "CPU3_SYS_PWROK"
      out:
        name: "SYS_PWROK"

  - PLTRST_Enable_Unit:
      in:
        and:
          - name: "RSMRST"
            invert: true
      out:
        name: "RST_PLTRST_N_On"

  - FM_SLPS3_N_Enable_Unit:
      in:
        and:
          - name: "RSMRST"
            invert: true
      out:
        name: "FM_SLPS3_N_On"

  - FM_SLPS4_N_Enable_Unit:
      in:
        and:
          - name: "RSMRST"
            invert: true
      out:
        name: "FM_SLPS4_N_On"

  - PWRGD_CPUPWRGD_Enable_Unit:
      in:
        and:
          - name: "RSMRST"
            invert: true
      out:
        name: "PWRGD_CPUPWRGD_On"

  - CPU_THERMTRIP_Unit:
      in:
        or:
          - name: "CPU0_THERMTRIP"
          - name: "CPU1_THERMTRIP"
          - name: "CPU2_THERMTRIP"
          - name: "CPU3_THERMTRIP"
      out:
        name: "THRMTRIP"

regulators:
  - name: "p3v3_pch"
  - name: "p1v8_pch_aux"
  - name: "p1v05_pch_aux"

floating_signals:
  - "p1v05_pch_aux_Enabled"
  - "p1v05_pch_aux_Fault"
  - "p1v8_pch_aux_Enabled"
  - "p1v8_pch_aux_Fault"
  - "p3v3_pch_Enabled"
  - "p3v3_pch_Fault"
